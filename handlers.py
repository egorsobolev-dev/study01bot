# handlers.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import sqlite3
import logging
from database import save_order
from admin import ADMIN_IDS

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    conn = sqlite3.connect('academic_bot.db')
    cursor = conn.cursor()
    cursor.execute(
        'INSERT OR REPLACE INTO users (user_id, username, first_name) VALUES (?, ?, ?)',
        (user.id, user.username, user.first_name)
    )
    conn.commit()
    conn.close()
    
    welcome_text = f"""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! üëã

–Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.

–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:
üìö –ö—É—Ä—Å–æ–≤—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏
üéì –î–∏–ø–ª–æ–º–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
üìù –†–µ—Ñ–µ—Ä–∞—Ç–∞–º–∏ –∏ —ç—Å—Å–µ
üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º–∏

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new_order –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    """
    
    keyboard = [
        [InlineKeyboardButton("üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data='new_order')],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_orders')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def new_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìö –ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞", callback_data='type_coursework')],
        [InlineKeyboardButton("üéì –î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞", callback_data='type_diploma')],
        [InlineKeyboardButton("üìù –†–µ—Ñ–µ—Ä–∞—Ç", callback_data='type_essay')],
        [InlineKeyboardButton("üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", callback_data='type_presentation')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ - –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ callback
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:", 
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:", 
            reply_markup=reply_markup
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):    
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""  
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/new_order - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑

üìö –¢–∏–ø—ã —Ä–∞–±–æ—Ç:
- –ö—É—Ä—Å–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã
- –î–∏–ø–ª–æ–º–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã  
- –†–µ—Ñ–µ—Ä–∞—Ç—ã –∏ —ç—Å—Å–µ
- –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏

üìß –î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.
    """
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ - –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ callback
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.edit_message_text(help_text)
    else:
        await update.message.reply_text(help_text)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Update –¥–ª—è callback
    callback_update = Update(
        update_id=update.update_id,
        callback_query=query
    )
    
    if query.data == 'new_order':
        await new_order(callback_update, context)
    elif query.data == 'help':
        await help_command(callback_update, context)
    elif query.data == 'my_orders':
        await query.edit_message_text("üìã –§—É–Ω–∫—Ü–∏—è '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    elif query.data.startswith('type_'):
        work_type_map = {
            'type_coursework': '–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞',
            'type_diploma': '–î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞', 
            'type_essay': '–†–µ—Ñ–µ—Ä–∞—Ç',
            'type_presentation': '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è'
        }
        
        work_type = work_type_map.get(query.data, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['selected_work_type'] = work_type
        context.user_data['waiting_for_description'] = True
        
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {work_type}\n\n"
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª—ã/—Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã.\n\n"
            "–£–∫–∞–∂–∏—Ç–µ:\n"
            "‚Ä¢ –¢–µ–º—É —Ä–∞–±–æ—Ç—ã\n"
            "‚Ä¢ –û–±—ä–µ–º (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü)\n"
            "‚Ä¢ –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏."
        )
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def handle_order_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not context.user_data.get('waiting_for_description'):
        return
    
    user = update.effective_user
    work_type = context.user_data.get('selected_work_type', '–ù–µ —É–∫–∞–∑–∞–Ω')
    description = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    order_id = save_order(user.id, work_type, description)
    
    if order_id:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç!\n\n"
            f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {work_type}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description[:100]}...\n\n"
            "üìû –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏."
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await send_admin_notification(context, {
            'id': order_id,
            'user_id': user.id,
            'user_name': user.first_name,
            'username': f"@{user.username}" if user.username else "–ë–µ–∑ username",
            'work_type': work_type,
            'description': description
        })
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
    else:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def handle_order_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ –∫ –∑–∞–∫–∞–∑—É"""
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    if context.user_data.get('waiting_for_description'):
        user = update.effective_user
        
        file_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª"
        if update.message.document:
            file_name = update.message.document.file_name
        elif update.message.photo:
            file_name = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        
        await update.message.reply_text(
            f"üìé –§–∞–π–ª '{file_name}' –ø–æ–ª—É—á–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã."
        )

async def send_admin_notification(context: ContextTypes, order_data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    
    admin_message = f"""
üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó #{order_data['id']}

üë§ –ö–ª–∏–µ–Ω—Ç: {order_data['user_name']} ({order_data['username']})
üÜî ID: {order_data['user_id']}
üìö –¢–∏–ø —Ä–∞–±–æ—Ç—ã: {order_data['work_type']}

üìù –û–ø–∏—Å–∞–Ω–∏–µ:
{order_data['description']}

‚è∞ –í—Ä–µ–º—è: {context.bot_data.get('current_time', '—Å–µ–π—á–∞—Å')}
    """
    
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(admin_id, admin_message)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order_data['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")